<pad>
<s>
</s>
<unk_type>
null_literal
generic_type
assignment_expression
hex_integer_literal
element_value_array_initializer
while_statement
else
constructor_declaration
final
type_arguments
class
update_expression
expression
byte
switch_statement
labeled_statement
&
void_type
array_type
spread_parameter
object_creation_expression
catch_formal_parameter
throw_statement
field_declaration
int
>
field_access
block
instanceof_expression
annotation
wildcard
synchronized
method_invocation
switch_label
return
protected
formal_parameters
method_reference
char
case
::
class_literal
for_statement
constructor_body
--
dimensions
this
for
floating_point_type
missing_update_expression
long
type_bound
throw
decimal_integer_literal
array_access
=
instanceof
inferred_parameters
assert_statement
throws
resource_specification
return_statement
identifier
dimensions_expr
lambda_expression
class_declaration
unary_expression
resource
while
element_value_pair
->
scoped_type_identifier
integral_type
|
argument_list
switch_block
default
float
binary_integer_literal
catch_type
string_literal
character_literal
ternary_expression
@
text_block
octal_integer_literal
enhanced_for_statement
cast_expression
synchronized_statement
double
masked_expression
super
array_initializer
finally_clause
class_body
scoped_identifier
formal_parameter
public
local_variable_declaration
if_statement
marker_annotation
do_statement
false
extends
short
modifiers
assert
continue_statement
private
true
...
try_with_resources_statement
array_creation_expression
++
catch_clause
break_statement
binary_expression
boolean_type
<
try_statement
annotation_argument_list
type_parameter
method_declaration
type_identifier
?
type_parameters
decimal_floating_point_literal
variable_declarator
new
try
static
.
.
(
)
[
]
{
}
:
==
+=
-=
/=
*=
!=
>=
<=
|=
>>=
<<=
^=
&=
+
-
*
/
!
,
sub_identifier
sub_type_identifier